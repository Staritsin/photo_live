from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import ContextTypes
import tempfile
import os
import asyncio

from db.models import User, GenerationRaw


from config import settings
from db.database import get_session
from db.models import User
from services.replicate_kling import generate_video_from_photo
from .utils import send_or_replace_text, delete_message_safe
from services import gsheets
from db.repo import get_referral_stats, has_generations  # –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
import time




PHOTO_KEY = "photo_bytes"
PROMPT_KEY = "prompt"
LAST_MSG_ID = "last_message_id"


_delete_message_safe = delete_message_safe
_send_or_replace_text = send_or_replace_text


def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_menu")]])


async def start_animate_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ª–æ–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø–æ—Ç–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    asyncio.create_task(gsheets.log_user_event(
        user_id=update.effective_user.id,
        username=update.effective_user.username or "",
        event="start_animate_flow",
    ))

    context.user_data.clear()
    text = (
        "‚ú® –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ –∂–∏–≤—ã–º!\n"
        "üñº –í–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏—è. –û–∂–∏–≤–∏—Ç–µ –∏—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º!\n\n"
        "–ü—Ä–æ—Å—Ç–æ–π —à–∞–≥ ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –º–∞–≥–∏—é! ü™Ñ\n"
    )
    if update.callback_query:
        try:
            await update.callback_query.answer()
        except Exception:
            pass

        await update.callback_query.message.reply_text(text, reply_markup=back_menu_kb())
    else:
        await update.message.reply_text(text, reply_markup=back_menu_kb())

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    file = await update.message.photo[-1].get_file()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
        await file.download_to_drive(temp_file.name)
        photo_path = temp_file.name

    context.user_data["last_photo_path"] = photo_path

    try:
        await update.message.delete()
    except Exception:
        pass

    text = (
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ ‚Äî –∫–∞–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å.\n"
        "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥–ª—è–¥–µ–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ üí´ \n\n"

        "–ü—Ä–∏–º–µ—Ä:\n"
        "–õ—é–¥–∏ –Ω–∞ —Ñ–æ—Ç–æ —É–ª—ã–±–∞—é—Ç—Å—è, –º–∞—à—É—Ç —Ä—É–∫–∞–º–∏ –∏ –æ–±–Ω–∏–º–∞—é—Ç—Å—è.\n"
        "–ß–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –≤–ª–µ–≤–æ.\n"
        "–ú–∞–º–∞ –±–µ—Ä–µ—Ç —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∏ –∏ —Ü–µ–ª—É–µ—Ç.\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π¬ª –∏–ª–∏ ¬´—à–ª–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π¬ª.\n\n"
        "–ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –æ–∂–∏–≤–∏—Ç—å! ‚ú®\n"
    )

    with open(photo_path, "rb") as photo_file:
        msg = await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_file,
            caption=text,
            reply_markup=back_menu_kb()
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    context.user_data[LAST_MSG_ID] = msg.message_id
    # –ª–æ–≥: —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ
    asyncio.create_task(gsheets.log_user_event(
        user_id=update.effective_user.id,
        username=update.effective_user.username or "",
        event="photo_received",
        meta={}
    ))

async def on_prompt_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "last_photo_path" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
        return

    prompt_text = update.message.text.strip()
    context.user_data[PROMPT_KEY] = prompt_text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ "–æ–∫–Ω–æ"
    try:
        await update.message.delete()
    except Exception:
        pass

    text = (
        "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        f"‚úçÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: *{prompt_text}*\n\n"
        "–≠–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ª–æ–≤–∞–º–∏, —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã –Ω–∞ –≤–∏–¥–µ–æ!\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û–∂–∏–≤–∏—Ç—å¬ª –∏ —É–¥–∏–≤–∏—Ç–µ –≤—Å–µ—Ö –∑–∞ –ø–∞—Ä—É –º–≥–Ω–æ–≤–µ–Ω–∏–π ‚ú®\n"
    )

    buttons = [
        [InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="do_animate")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_menu")]
    ]

    try:
        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å caption —É —Ñ–æ—Ç–æ
        await context.bot.edit_message_caption(
            chat_id=update.effective_chat.id,
            message_id=context.user_data[LAST_MSG_ID],
            caption=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    # ‚úÖ –õ–æ–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø—Ä–æ–º–ø—Ç (–≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
    asyncio.create_task(gsheets.log_user_event(
        user_id=update.effective_user.id,
        username=update.effective_user.username or "",
        event="prompt_entered",
        meta={"prompt": prompt_text[:120]}
    ))
    

async def on_animate_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    # –ª–æ–≥: –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    asyncio.create_task(gsheets.log_user_event(
        user_id=q.from_user.id,
        username=q.from_user.username or "",
        event="animate_confirm",
        meta={}
    ))

    if "last_photo_path" not in context.user_data or PROMPT_KEY not in context.user_data:
        await q.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –æ–∂–∏–≤–∏—Ç—å!")
        return

    # –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await q.message.edit_caption(
        "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 30‚Äì60 —Å–µ–∫—É–Ω–¥.\n\n"
        "üëâ –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –±–æ—Ç–∞ ‚Äî —è –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ üôå"
    )

    # üöÄ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(run_generation_task(update, context))



async def run_generation_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    user_id = q.from_user.id
    prompt_text = context.user_data.get(PROMPT_KEY)
    photo_path = context.user_data.get("last_photo_path")


    async with get_session() as session:
        from sqlalchemy import select
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return  
        
        # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if user.balance <= 0:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üëá",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance")],
                    [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_menu")]
                ])
            )
            return

        start_time = time.time()

        try:
            # üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
            async for status in generate_video_from_photo(photo_path, duration=4, prompt=prompt_text):
                if status["status"] == "processing":
                    continue

                # === Fal –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Üí –ø—Ä–æ–±—É–µ–º Replicate ===
                if status["status"] == "failed" and "Fal.ai" in status.get("error", ""):
                    print("‚ö†Ô∏è Fal.ai –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Replicate...")
                    os.environ["ENGINE"] = "replicate"
                    async for backup in generate_video_from_photo(photo_path, duration=4, prompt=prompt_text):
                        status = backup
                        break

                # === –£—Å–ø–µ—à–Ω–æ ===
                if status["status"] == "succeeded":
                    video_url = status["url"]
                    engine_name = os.getenv("ENGINE", "replicate").upper()
                    gen_secs = int(time.time() - start_time)

                    new_balance_after = max(0, int(user.balance) - 1)
                    primary_row = (
                        [InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data="animate")]
                        if new_balance_after > 0 else
                        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance")]
                    )

                    kb = InlineKeyboardMarkup([
                        primary_row,
                        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_menu")]
                    ])

                    msg = await context.bot.send_video(
                        chat_id=update.effective_chat.id,
                        video=video_url,
                        caption=(
                            f"‚úÖ *–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!*\n\n"
                            f"üé¨ –î–≤–∏–∂–æ–∫: *{engine_name}*\n"
                            f"‚ú® –ü—Ä–æ–º–ø—Ç: {prompt_text}\n"
                            f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_secs} —Å–µ–∫."
                        ),
                        parse_mode="Markdown",
                        reply_markup=kb
                    )

                    video_file_id = msg.video.file_id if msg and msg.video else ""


                    # üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    old = int(user.balance)
                    user.balance -= 1
                    user.total_generations = (user.total_generations or 0) + 1
                    await session.commit()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞


                    # üíæ –ó–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    gen_entry = GenerationRaw(
                        user_id=user.id,
                        price_rub=float(settings.price_rub),
                        input_type="photo",
                        prompt=prompt_text[:1024],
                        file_id=video_file_id,
                    )
                    session.add(gen_entry)
                    await session.commit()  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏




                    invited_total, invited_paid = await get_referral_stats(user.id)
                    referral_bonus = invited_paid * settings.bonus_per_friend

                    asyncio.create_task(gsheets.log_balance_change(
                        user_id=user.id,
                        old_balance=old,
                        delta=-1,
                        new_balance=int(user.balance),
                        reason="consume_generation",
                        referral_bonus=referral_bonus
                    ))

                    asyncio.create_task(gsheets.log_generation(
                        user_id=user.id,
                        username=user.username or "",
                        price_rub=float(settings.price_rub),
                        input_type="photo",
                        prompt=prompt_text,
                        file_id=video_file_id
                    ))

                    return

                elif status["status"] == "failed":
                    raw_error = status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

                    if "content_policy_violation" in raw_error:
                        error_text = (
                            "üö´ –í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ.\n\n"
                            "‚ùóÔ∏è–ü—Ä–∏—á–∏–Ω–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ "
                            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–∏—Ç–∏–∫–∞, –ª–∏—Ü–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π, –Ω–∞—Å–∏–ª–∏–µ –∏ —Ç.–¥.).\n\n"
                            "ü™Ñ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt)."
                        )
                    else:
                        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n{raw_error[:4000]}"

                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=error_text,
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="do_animate")],
                            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_menu")]
                        ])
                    )
                    return

        finally:
            if os.path.isfile(photo_path):
                os.remove(photo_path)
            for key in ["last_photo_path", PROMPT_KEY]:
                context.user_data.pop(key, None)

# –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
async def do_animate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if not await has_generations(q.from_user.id):
        await context.bot.send_message(
            chat_id=q.message.chat_id,
            text="‚ö†Ô∏è –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å üëá",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_menu")]
            ])
        )
        return   # —Å—Ç–æ–ø, –Ω–µ –∏–¥—ë–º –¥–∞–ª—å—à–µ

    # –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω
    await on_animate_click(update, context)
