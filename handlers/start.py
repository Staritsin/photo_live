from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo
from telegram.ext import ContextTypes
import asyncio
import time

from services.performance_logger import measure_time
from sqlalchemy import select
from sqlalchemy import text as sql_text


from config import settings
from db.database import get_session
from db.models import User
from .utils import send_or_replace_text
from services import gsheets

from services.billing_core import calc_generations
from services import billing_core
from db.repo import get_referral_stats, has_generations

from pathlib import Path
FILE_ID_PATH = Path("assets/main_menu_video.id")





# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@measure_time
def main_menu_kb(user) -> InlineKeyboardMarkup:
    buttons = []

    buttons.append([InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate")])
    buttons.append([InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="balance")])
    buttons.append([InlineKeyboardButton("üìñ –í–∏–¥–µ–æ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")])

    return InlineKeyboardMarkup(buttons)


# –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@measure_time
async def ensure_user(update: Update) -> User:
    user_tg = update.effective_user

    async with get_session() as session:

        result = await session.execute(select(User).where(User.id == user_tg.id))
        user = result.scalar_one_or_none()

        if not user:
            # üîπ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = User(
                id=user_tg.id,
                full_name=user_tg.full_name,
                username=user_tg.username,
                balance=0,
                consent_accepted=False,
            )
            session.add(user)
            await session.commit()



        else:
            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user.full_name = user_tg.full_name
            user.username = user_tg.username
            await session.commit()

        # ‚úÖ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º billing_core-—é–∑–µ—Ä–∞
        return billing_core.get_user(user_tg.id)


# –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
USER_AGREEMENT_URL = "https://clck.ru/3PEqg8"
PRIVACY_POLICY_URL = "https://clck.ru/3PEqbo"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    start_time = time.perf_counter()
    tg_user = update.effective_user
    chat_id = update.effective_chat.id
    print(f"üöÄ /start –æ—Ç {tg_user.username or tg_user.id}")

    # üëá –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç message –¥–∞–∂–µ –ø—Ä–∏ callback / webhook
    if update.message:
        send = update.message.reply_text
    else:
        send = update.effective_chat.send_message

    await send("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º... üî•")

    # ‚öôÔ∏è —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(billing_core.upsert_user(tg_user.id, tg_user.username))
    asyncio.create_task(gsheets.log_user_event(
        user_id=tg_user.id, username=tg_user.username or "", event="start_pressed"
    ))

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª ---
    args = context.args
    if args and args[0].startswith("ref"):
        referrer_id = int(args[0].replace("ref", ""))
        if referrer_id != tg_user.id:
            from db.repo import add_referral
            await add_referral(inviter_id=referrer_id, invited_id=tg_user.id)
            asyncio.create_task(gsheets.log_referral(
                referrer_id=referrer_id, new_user_id=tg_user.id, status="registered"
            ))

    # --- –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Postgres ---
    async with get_session() as session:
        result = await session.execute(select(User).where(User.id == tg_user.id))
        user_db = result.scalar_one_or_none()

        if not user_db:
            # üîπ –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            user_db = User(
                id=tg_user.id,
                full_name=tg_user.full_name,
                username=tg_user.username,
                balance=0,
                consent_accepted=False,
            )
            session.add(user_db)
            print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.username or tg_user.id}")
        else:
            # üîπ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user_db.full_name = tg_user.full_name
            user_db.username = tg_user.username
            print(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.username or tg_user.id}")

        await session.commit()

        # üîπ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        result = await session.execute(select(User).where(User.id == tg_user.id))
        user_db = result.scalar_one()


        # === AUTO UPSERT USER (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ) ===
        await session.execute(sql_text("""
            INSERT INTO users (id, username, full_name, created_at)
            VALUES (:id, :username, :full_name, NOW())
            ON CONFLICT (id) DO UPDATE 
            SET username = EXCLUDED.username,
                full_name = EXCLUDED.full_name,
                last_active_at = NOW();
        """), {
            "id": tg_user.id,
            "username": tg_user.username,
            "full_name": tg_user.full_name
        })
        await session.commit()


    # === –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø user_db ===
    if user_db.consent_accepted:
        # ‚ö° –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await show_main_menu(update, context, user_db)
    else:
        # ‚ö° –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–∂–∏–≤–∏—Ç—å —Ç–≤–æ–∏ —Ñ–æ—Ç–æ.\n\n"
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
            f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:\n{USER_AGREEMENT_URL}\n\n"
            f"üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n{PRIVACY_POLICY_URL}\n\n"
            "–ù–∞–∂–º–∏ ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üî•"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")]
        ])
        await send_or_replace_text(update, context, text, reply_markup=kb)
        print(f"‚ö°Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è start(): {time.perf_counter() - start_time:.2f} —Å–µ–∫")




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@measure_time
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    start_time = time.perf_counter()
    gen_price = settings.price_rub
    packs = settings.packs
    

    # ---- —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –ë–î (–∞ –Ω–µ –∏–∑ billing_core) ----
    
    async with get_session() as session:

        udb = (await session.execute(
            select(User).where(User.id == update.effective_user.id)
        )).scalar_one()

        paid_balance = int(udb.balance)                # —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è

    # —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–µ "–æ—Å—Ç–∞—Ç–æ–∫")
    invited_total, invited_paid = await get_referral_stats(user.id)

    bonus_total = invited_paid * settings.bonus_per_friend

    total_available = paid_balance + bonus_total


    # ---- —Ç–µ–∫—Å—Ç ----
    text = f"üëã {update.effective_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"

    text += "‚ú® –ì–æ—Ç–æ–≤—ã –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ? üöÄ\n\n"

    text += (
        "üíñ –ú—ã –ø–æ–º–æ–∂–µ–º –æ–∂–∏–≤–∏—Ç—å –¥–æ—Ä–æ–≥–∏–µ —Å–µ—Ä–¥—Ü—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚ú®\n"
        "üéâ –ü–æ–¥–∞—Ä–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∂–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã!\n\n"
        "*–ö–∞–∫ –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ:*\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —á–µ—Ç–∫–∏–º–∏ –ª–∏—Ü–∞–º–∏/–≤ –∞–Ω—Ñ–∞—Å\n"
        "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å (—ç–º–æ—Ü–∏—è + –¥–µ–π—Å—Ç–≤–∏—è)\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ üé¨\n"
        "5Ô∏è‚É£ –ü–æ–¥–∞—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é –±–ª–∏–∑–∫–∏–º üíå\n\n"


        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1 –æ–∂–∏–≤–ª–µ–Ω–∏–µ = 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = {gen_price} ‚ÇΩ\n\n"
    )
    text += (
        f"\nüßæ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞: {total_available} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        f"‚ú® –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –¥—Ä—É–∑–µ–π: +{bonus_total}\n\n"
        f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Üí –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–π—Ç–µ +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ üéÅ\n\n"
        f" (—Ç.–µ. –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–≥–∞, –∏ –æ–Ω –æ–ø–ª–∞—Ç–∏–ª –ª—é–±–æ–π –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ üéÅ)\n"

    )

    # ---- –∫–Ω–æ–ø–∫–∏ ----
    invite_link = f"https://t.me/Photo_AliveBot?start=ref{user.id}"


    # üí° –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å 0 ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É
    if total_available == 0:
        balance_label = f"üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞ {gen_price} ‚ÇΩ"
    else:
        balance_label = "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"


    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(balance_label, callback_data="balance")],
        [InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
        [InlineKeyboardButton(
            "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
            switch_inline_query=f"üî• –ü–æ–ø—Ä–æ–±—É–π –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ! –Ø —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞—é: {invite_link}"
        )],
    ])

        # === –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ===
        try:
            from pathlib import Path
            import aiofiles
    
            video_id_path = Path("assets/main_menu_video.id")
    
            if video_id_path.exists():
                # ‚ö° –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
                async with aiofiles.open(video_id_path, "r") as f:
                    file_id = (await f.read()).strip()
    
                await update.effective_chat.send_chat_action("upload_video")
                await update.effective_chat.send_video(
                    video=file_id,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=kb
                )
    
            else:
                # üì• –µ—Å–ª–∏ –Ω–µ—Ç file_id ‚Äî –≥—Ä—É–∑–∏–º mp4, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
                video_path = Path("assets/main_menu_video.mp4")
                msg = await update.effective_chat.send_video(
                    video=open(video_path, "rb"),
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=kb
                )
                try:
                    fid = msg.video.file_id
                    video_id_path.write_text(fid)
                    print(f"üíæ Saved new video file_id: {fid}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id: {e}")
    
        except Exception as e:
            print(f"‚ö†Ô∏è send_video fallback: {e}")
            await send_or_replace_text(update, context, text, reply_markup=kb)
    
        print(f"‚ö°Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è show_main_menu(): {time.perf_counter() - start_time:.2f} —Å–µ–∫")
    

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è ===
async def handle_consent_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    user_gen = None


    async with get_session() as session:
        result = await session.execute(select(User).where(User.id == q.from_user.id))
        user = result.scalar_one_or_none()
        if user and not user.consent_accepted:
            user.consent_accepted = True
            await session.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")


            asyncio.create_task(gsheets.log_user_event(
                user_id=q.from_user.id,
                username=q.from_user.username or "",
                event="consent_accepted"
            ))

    # üöÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
    await show_main_menu(update, context, user or q.from_user)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ"
@measure_time
async def check_balance_and_animate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    user_id = q.from_user.id

    # –õ–æ–≥ –≤ Google Sheets: –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ"
    if gsheets.ENABLED:
        asyncio.create_task(gsheets.log_user_event(
            user_id=user_id,
            username=q.from_user.username or "",
            event="click_animate",
            meta={}
        ))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ has_generations)
    if not await has_generations(user_id):
        # üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
        await send_or_replace_text(update, context, 
            "‚ö†Ô∏è –£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ú®"
        )
        
        # üí≥ –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        from handlers.balance import open_balance
        await open_balance(update, context)
        return


    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
    from handlers.photo import start_animate_flow
    await start_animate_flow(update, context)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def reset_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from sqlalchemy import select
    async with get_session() as session:
        result = await session.execute(select(User).where(User.id == update.effective_user.id))
        user = result.scalar_one()
        user.consent_accepted = False
        await session.commit()

    
    await send_or_replace_text(update, context, "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.")
