# handlers/balance.py
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from sqlalchemy import select
from db.models import User, Referral, Payment
import asyncio

from config import settings
from db.database import get_session

from sqlalchemy.orm import selectinload

from services import yookassa as yk
from db.repo import get_referral_stats
from services.performance_logger import measure_time


# ============ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ============
from services.gsheets import log_user_event, log_payment_attempt, log_payment_result, log_balance_change
from handlers.utils import send_or_replace_text


# ===== –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É =====
from services.tinkoff import create_payment as tinkoff_create, get_payment_status as tinkoff_status

import os, secrets, urllib.parse
from services.billing_core import calc_generations
from services import billing_core
from services import gsheets


ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))



def _make_test_link(amount: int, user_id: int, description: str):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É Tinkoff (–±–µ–∑ API)."""
    order_id = f"{user_id}_{secrets.token_hex(4)}"
    url = (
        f"https://www.tinkoff.ru/kassa/demo/payform"
        f"?TerminalKey={settings.tinkoff_terminal_key}"
        f"&Amount={int(amount) * 100}"
        f"&OrderId={order_id}"
        f"&Description={urllib.parse.quote_plus(description)}"
    )
    return url, order_id



# ============ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ============
async def add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = 5  # —Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–∏—Ç—å
    async with get_session() as session:

        result = await session.execute(select(User).where(User.id == update.effective_user.id))
        user = result.scalar_one()
        old = int(user.balance)
        user.balance = int(user.balance) + amount
        session.add(user)
        await session.commit()

        # –ª–æ–≥ –≤ —Ç–∞–±–ª–∏—Ü—É
        asyncio.create_task(log_balance_change(
            user_id=user.id,
            old_balance=old,
            delta=amount,
            new_balance=int(user.balance),
            reason="manual_add_balance",
        ))

        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.0f} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        )

# ============ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ============

@measure_time
async def open_balance(update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    async with get_session() as session:

        result = await session.execute(select(User).where(User.id == q.from_user.id))

        user = result.scalar_one_or_none()
        if not user:
            return await send_or_replace_text(update, context, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


        # –ª–æ–≥ –≤ Google Sheets
        asyncio.create_task(gsheets.log_user_event(
            user_id=user.id,
            username=user.username,
            event="open_balance",
            meta={"balance": user.balance}
        ))

        gen_price = settings.price_rub
        packs = settings.packs  # [5, 15, 30, 50] = –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

        # ---- —Å—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å (–ø–ª–∞—Ç–Ω—ã–π + —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞) ----
        paid_balance = int(user.balance)
        invited_total, invited_paid = await get_referral_stats(user.id)
        referral_bonus = invited_paid * settings.bonus_per_friend
        total_available = paid_balance + referral_bonus

        # ---- —Ç–µ–∫—Å—Ç ----
        text = (
            "üíé <b>–¢–ê–†–ò–§–´ –ì–ï–ù–ï–†–ê–¶–ò–ô</b>\n\n"
            f"üí° 1 –æ–∂–∏–≤–ª–µ–Ω–∏–µ = 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = <b>{gen_price} ‚ÇΩ</b>\n\n"
            f"üéâ –ë–∞–ª–∞–Ω—Å: <b>{total_available}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            "üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ <i>–Ω–µ —Å–≥–æ—Ä–∞—é—Ç</i> –∏ –∫–æ–ø—è—Ç—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ‚ú®\n\n"
            "‚¨áÔ∏è <b>–í–´–ë–ï–†–ò–¢–ï –ü–ê–ö–ï–¢:</b>\n\n"
            f"üéÅ –ó–∞ –∫–∞–∂–¥—ã–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Üí +{settings.bonus_per_10} –≤ –ø–æ–¥–∞—Ä–æ–∫!\n"
            f"ü§ù –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ ‚Üí +{settings.bonus_per_friend} –≤ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
        )

        # #–ø—Ä–æ–±–Ω–∏–∫: –≤—ã–≤–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ 2 –≤ —Ä—è–¥
        buttons = []
        row = []
        for i, base in enumerate(packs):
            amount_rub = base * gen_price
            gens_total = calc_generations(base)
            bonus = gens_total - base
            label = f"{base} –≥–µ–Ω = {amount_rub} ‚ÇΩ"
            if bonus > 0:
                label += f" (+{bonus}üéÅ)"
            
            row.append(InlineKeyboardButton(label, callback_data=f"topup:{amount_rub}"))
            if len(row) == 2 or i == len(packs) - 1:
                buttons.append(row)
                row = []

        # –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
        kb = InlineKeyboardMarkup(buttons)

        try:
            if q.message and (q.message.video or q.message.photo):
                await q.message.edit_caption(
                    caption=text, parse_mode="HTML", reply_markup=kb
                )
            else:
                await q.message.edit_text(
                    text=text, parse_mode="HTML", reply_markup=kb
                )
        except Exception:
            await context.bot.send_message(
                chat_id=q.message.chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=kb
            )

# ===== –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É =====
@measure_time
async def create_topup(update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    # üß© –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    from services.billing_core import upsert_user
    user_id = q.from_user.id
    username = q.from_user.username or ""
    await upsert_user(user_id, username)



    description = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    provider = settings.payment_provider.upper()  # TINKOFF | YOOKASSA
    mode = settings.payment_mode.upper()



    import logging
    logging.info(f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: {provider} ({mode}) ‚Äî {amount} ‚ÇΩ")


    url = None
    pay_id = None
    order_id = f"{q.from_user.id}_{secrets.token_hex(4)}"

    # === –†–∞—Å—á—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –±–æ–Ω—É—Å–∞ ===
    base = amount // settings.price_rub
    total = calc_generations(base)
    bonus = total - base
    bonus_value = bonus * settings.price_rub
    approx_price = round(amount / total)

    # #–ø—Ä–æ–±–Ω–∏–∫: —Ç–µ–∫—Å—Ç –¥–ª—è 1 –∏ 10+ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if base <= 1:
        purchase_text = (
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
            f"üé¨ {base} –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = {settings.price_rub} ‚ÇΩ\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, "
            "—á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ ‚úÖ"
        )
    elif base <= 10:
        purchase_text = (
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
            f"üé¨ {base} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = {settings.price_rub * base} ‚ÇΩ\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, "
            "—á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ ‚úÖ"
        )
    else:
        purchase_text = (
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
            f"üé¨ {base} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π +{bonus} –±–æ–Ω—É—Å–æ–º ‚Üí –≤—Å–µ–≥–æ {total}\n"

            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, "
            "—á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ ‚úÖ"
        )

    if provider == "YOOKASSA":
        pay_id, url, order_id = await yk.create_payment(
            amount, description, q.from_user.id, order_id
        )


        asyncio.create_task(log_payment_attempt(
            user_id=q.from_user.id,
            username=update.effective_user.username or "",
            amount_rub=float(amount),
            order_id=order_id,
            mode="YOOKASSA",
            url=url,
        ))

    else:
        # Tinkoff
        try:
            pay_id, url, order_id = tinkoff_create(
                amount, description, q.from_user.id, order_id=order_id
            )
            asyncio.create_task(log_payment_attempt(
                user_id=q.from_user.id,
                username=update.effective_user.username or "",
                amount_rub=float(amount),
                order_id=order_id,
                mode=("PROD" if mode == "PROD" else "TEST"),
                url=url,
            ))
        except Exception as e:
            print("‚ùå create_payment failed:", repr(e))
            # === Fallback: —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ===
            url, order_id = _make_test_link(amount, q.from_user.id, description)
            pay_id = order_id
            asyncio.create_task(log_payment_attempt(
                user_id=q.from_user.id,
                username=update.effective_user.username or "",
                amount_rub=float(amount),
                order_id=order_id,
                mode="TINKOFF_FALLBACK",
                url=url,
            ))


    if not pay_id:
        pay_id = order_id

    # –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚ÇΩ", url=url)],
        [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{pay_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu")]
    ])

    await q.message.reply_text(
        text=purchase_text,
        reply_markup=kb
    )


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ø–∞–ø–æ–≤ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π) =====
async def handle_topup(update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    _, amount = q.data.split(":", 1)
    await create_topup(update, context, int(amount))


@measure_time
# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ =====
async def check_payment(update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    _, pay_id = q.data.split(":", 1)

    # –¥–æ—Å—Ç–∞—ë–º –ø–ª–∞—Ç—ë–∂ –∏–∑ –±–∞–∑—ã
    async with get_session() as session:
        payment = (await session.execute(
            select(Payment).where(Payment.provider_payment_id == pay_id)
            
        )).scalar_one_or_none()

        if not payment:
            await send_or_replace_text(update, context, "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        provider = getattr(payment, "provider", settings.payment_provider).upper()
        amount_for_log = float(payment.amount)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    if provider == "YOOKASSA":
        status = await asyncio.to_thread(yk.get_payment_status, pay_id)
    else:
        status = tinkoff_status(pay_id)


    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    asyncio.create_task(log_user_event(
        user_id=q.from_user.id,
        username=q.from_user.username or "",
        event="check_payment",
        meta={"pay_id": pay_id, "status": status, "provider": provider}
    ))

    # –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    asyncio.create_task(log_payment_result(
        user_id=q.from_user.id,
        username=q.from_user.username or "",
        payment_id=pay_id,
        status=status,
        amount_rub=amount_for_log,
    ))

    # —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
    if status in ["CONFIRMED", "AUTHORIZED", "SUCCEEDED"]:

        async with get_session() as session:
            payment = (await session.execute(
                select(Payment).where(Payment.provider_payment_id == pay_id)
            )).scalar_one_or_none()

            if payment and payment.status not in ["CONFIRMED", "AUTHORIZED", "SUCCEEDED"]:
                payment.status = status
                user = (await session.execute(
                    select(User).where(User.id == q.from_user.id)
                )).scalar_one()
                old = int(user.balance)

                base = int(payment.amount) // settings.price_rub
                gens_total = calc_generations(base)
                user.balance += gens_total

                await session.commit()

                asyncio.create_task(log_balance_change(
                    user_id=user.id,
                    old_balance=old,
                    delta=gens_total,
                    new_balance=int(user.balance),
                    reason=f"{provider.lower()}_payment_confirmed",
                ))
                
                # === –†–ï–§–ï–†–ê–õ–ö–ê ===
                from db.models import Referral

                referral = (await session.execute(
                    select(Referral).where(
                        Referral.invited_id == q.from_user.id,
                        Referral.bonus_awarded.is_(False)
                    )
                )).scalar_one_or_none()

                if referral:
                    # –ø–æ–º–µ—á–∞–µ–º –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω–Ω—ã–º
                    referral.bonus_awarded = True
                    await session.commit()

                    # --- –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É +3 ---
                    ref_user = (await session.execute(
                        select(User).where(User.id == referral.inviter_id)
                    )).scalar_one_or_none()

                    if ref_user:
                        old = int(ref_user.balance)
                        ref_user.balance = old + settings.bonus_per_friend
                        await session.commit()

                        asyncio.create_task(log_balance_change(
                            user_id=ref_user.id,
                            old_balance=old,
                            delta=settings.bonus_per_friend,
                            new_balance=int(ref_user.balance),
                            reason="referral_bonus"
                        ))
                        inv_total, inv_paid = await get_referral_stats(ref_user.id)
                        bonus_total = inv_paid * settings.bonus_per_friend
                        asyncio.create_task(gsheets.update_referrals_summary(ref_user.id, inv_total, inv_paid, bonus_total))
                        # üí¨ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –æ –±–æ–Ω—É—Å–µ
                        try:
                            await context.bot.send_message(
                                chat_id=ref_user.id,
                                text=f"üéâ –í–∞—à –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—è üíé"
                            )
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é {ref_user.id}: {e}")


        # –µ—â—ë —Ä–∞–∑ –±–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –∏–∑ –ë–î, —á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –±—ã–ª —Å–≤–µ–∂–∏–π
        async with get_session() as session:

            user = (await session.execute(
                select(User).where(User.id == q.from_user.id)
            )).scalar_one()
                        
        await send_or_replace_text(
            update,
            context,
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!\nüé¨ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user.balance:.0f} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π üéâ",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate")]]
            )
        )
    elif status == "REJECTED":
        await send_or_replace_text(update, context, "‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await send_or_replace_text(update, context, f"‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –°—Ç–∞—Ç—É—Å: {status}")

# ============ –û–±–Ω—É–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ============
async def reset_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        result = await session.execute(select(User).where(User.id == update.effective_user.id))

        user = result.scalar_one()
        old = int(user.balance)  # —Å—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        user.balance = 0  # –æ–±–Ω—É–ª—è–µ–º
        await session.commit()

        # –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        asyncio.create_task(log_balance_change(
            user_id=user.id,
            old_balance=old,
            delta=-old,
            new_balance=0,
            reason="reset_generations",
        ))

        await update.message.reply_text("üîÑ –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ–±–Ω—É–ª—ë–Ω. –¢–µ–ø–µ—Ä—å —É –í–∞—Å 0 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

# ============ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É ============
async def compensate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: /compensate <user_id> <generations>"""

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compensate <user_id> <generations>")
        return

    try:
        user_id = int(context.args[0])
        gens_to_add = int(context.args[1])  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    async with get_session() as session:
        user = (await session.execute(
            select(User).where(User.id == user_id)
        )).scalar_one_or_none()

        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        old = int(user.balance)
        user.balance = int(user.balance) + gens_to_add
        await session.commit()

        # –ª–æ–≥
        asyncio.create_task(log_balance_change(
            user_id=user.id,
            old_balance=old,
            delta=gens_to_add,
            new_balance=int(user.balance),
            reason="compensate_generations",
        ))

        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {gens_to_add} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            f"üéâ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        )


# ============ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞) ============
@measure_time
async def get_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: /get_balance <user_id> ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_balance <user_id>")
        return

    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    async with get_session() as session:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —é–∑–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
        user = (await session.execute(
            select(User)
            .options(
                selectinload(User.referrals_as_inviter),
                selectinload(User.referrals_as_invited),
                selectinload(User.payments)
            )
            .where(User.id == user_id)
        )).scalar_one_or_none()

        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # ==== –ë–∞–ª–∞–Ω—Å ====
        invited_total, invited_paid = await get_referral_stats(user.id)
        referral_bonus = invited_paid * settings.bonus_per_friend
        balance = int(user.balance)
        total_generations = balance + referral_bonus

        # ==== –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂ ====
        if user.payments:
            last_payment = sorted(user.payments, key=lambda p: p.created_at)[-1]
            pay_info = (
                f"üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂:\n"
                f"‚Ä¢ –°—É–º–º–∞: {last_payment.amount} ‚ÇΩ\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {last_payment.status}\n"
                f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {last_payment.provider}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {last_payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        else:
            pay_info = "üí≥ –ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n"

        # ==== –†–µ—Ñ–µ—Ä–∞–ª—ã ====
        invited_count = len(user.referrals_as_inviter)
        invited_by_count = len(user.referrals_as_invited)

        # ==== –û—Ç–≤–µ—Ç ====
        text = (
            f"üë§ ID: <b>{user.id}</b>\n"
            f"üìõ Username: @{user.username or '‚Äî'}\n\n"
            f"üé¨ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: <b>{total_generations}</b>\n"
            f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: <b>{balance}</b>\n"
            f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: +{referral_bonus}\n\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {invited_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"üì• –ë—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω: {invited_by_count}\n\n"
            f"{pay_info}"
        )

        await update.message.reply_text(text, parse_mode="HTML")


# ============ –°–±—Ä–æ—Å –ø—Ä–æ–±–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ============
from handlers.start import show_main_menu   # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ‚Äî –¥–æ–±–∞–≤—å

@measure_time
async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å, —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "‚Äî"
    invite_link = f"https://t.me/Photo_AliveBot?start=ref{user_id}"

    async with get_session() as session:
        user = (await session.execute(
            select(User).where(User.id == user_id)

        )).scalar_one_or_none()

        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        balance = int(user.balance)
        invited_total, invited_paid = await get_referral_stats(user_id)
        bonus_total = invited_paid * settings.bonus_per_friend
        total_generations = balance + bonus_total

        referrer_username = (await session.execute(
            select(User.username)
            .join_from(User, Referral, Referral.inviter_id == User.id)
            .where(Referral.invited_id == user_id)
        )).scalar_one_or_none()

    # –ª–æ–≥ –≤ Google Sheets
    asyncio.create_task(gsheets.log_user_event(
        user_id=user_id,
        username=username,
        event="cmd_balance_opened",
        meta={
            "balance": balance,
            "bonus_total": bonus_total,
            "invited_total": invited_total,
            "invited_paid": invited_paid
        }
    ))

    # === –¢–ï–ö–°–¢ ===
    text = (
        f"üíé <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>\n\n"
        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
        f"üë§ <b>–õ–æ–≥–∏–Ω:</b> @{username}\n\n"
        f"üé¨ <b>–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b> {total_generations}\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {balance}\n"
        f"ü§ù –ó–∞ –¥—Ä—É–∑–µ–π: {bonus_total}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_total} (–∏–∑ –Ω–∏—Ö –æ–ø–ª–∞—Ç–∏–ª–∏: {invited_paid})\n\n"
    )

    if referrer_username:
        text += f"üë§ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª @{referrer_username}\n\n"
    else:
        text += (
            f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n"
            f"üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –¥—Ä—É–≥–∞: +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.\n\n"
        )

    safe_link = f"<code>{invite_link}</code>"
    text += (
        f"üîó –í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n{safe_link}\n\n"
        "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üöÄ"
    )

    # === –ö–ù–û–ü–ö–ò ===
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate"),
            InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="balance")
        ],
        [
            InlineKeyboardButton(
                "ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                switch_inline_query=f"üî• –ü–æ–ø—Ä–æ–±—É–π –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ! –ü–µ—Ä–µ–π–¥–∏ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ üëâ {invite_link}"
            )
        ]
    ])

    await update.message.reply_text(text, reply_markup=kb, parse_mode="HTML")


# –æ–±–Ω–æ–≤–ª—è–µ–º handle_balance
async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance –≤—ã–∑—ã–≤–∞–µ—Ç cmd_balance"""
    await cmd_balance(update, context)

# handlers/balance.py
# ============ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å ============
async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å: –±–∞–ª–∞–Ω—Å = 0, —Ä–µ—Ñ–µ—Ä–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã"""

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ---
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # --- –∫–∞–∫–æ–π user_id —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ---
    if context.args and len(context.args) >= 1:
        try:
            user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    else:
        user_id = update.effective_user.id  # –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–±–µ

    # --- —Ä–∞–±–æ—Ç–∞ —Å –ë–î ---
    async with get_session() as session:
        from sqlalchemy import delete
        from db.models import Referral, User

        user = (await session.execute(
            select(User).where(User.id == user_id)
        )).scalar_one_or_none()

        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –æ–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        user.balance = 0
    

        # —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (–∏ –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π, –∏ –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π)
        await session.execute(delete(Referral).where(
            (Referral.inviter_id == user.id) | (Referral.invited_id == user.id)
        ))

        await session.commit()

        if user_id == update.effective_user.id:
            await update.message.reply_text(
                "‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ç–µ–±—è!\n"
                "–ë–∞–ª–∞–Ω—Å = 0\n"
                "ü§ù –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –æ—á–∏—â–µ–Ω—ã"
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!\n"
                f"–ë–∞–ª–∞–Ω—Å = 0\n"
                f"ü§ù –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –æ—á–∏—â–µ–Ω—ã"
            )

__all__ = [
    "add_balance", "open_balance", "create_topup", "handle_topup",
    "check_payment", "reset_balance", "compensate", "get_balance",
    "cmd_balance", "handle_balance", "reset_all"
]
