# main.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
import time
start_time = time.perf_counter()

import os, json, asyncio, signal, logging
from pathlib import Path
from dotenv import load_dotenv

# === 1. –õ–æ–≥–∏ (—á–∏—Å—Ç—ã–µ, –±–µ–∑ –º—É—Å–æ—Ä–∞) ===
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)


# === 2. –ó–∞–≥—Ä—É–∂–∞–µ–º .env –¥–æ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ===
env_path = Path(__file__).parent / ".env"

load_dotenv(dotenv_path=env_path)

gcp_env = os.getenv("GCP_SA_JSON")
if gcp_env:
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
        data = json.loads(gcp_env)
        with open("/app/gcp_sa.json", "w") as f:
            json.dump(data, f, indent=2)
        print("‚úÖ GCP credentials file created.")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GCP_SA_JSON –≤ Railway (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON).")
else:
    print("‚ö†Ô∏è GCP_SA_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")


from services.performance_logger import measure_time
from config import settings
from middlewares.safe_callbacks import SafeCallbackMiddleware


from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)
from db.database import init_db
from services import gsheets

auto_loop = None
sync_dashboard_once = None
if os.getenv("GSHEETS_ENABLE", "0") == "1":
    from services.auto_sync_dashboard import auto_loop, sync_dashboard_once

from handlers.start import (
    start, handle_consent_yes, ensure_user,
    check_balance_and_animate, reset_consent, show_main_menu
)
from handlers.photo import on_photo, on_prompt_text, do_animate
from handlers.balance import (
    open_balance, check_payment, add_balance,
    reset_balance, handle_topup, compensate,
    get_balance, handle_balance, reset_all
)
from handlers.instruction import show_instruction
from handlers.support import open_support


# === 3. –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
print("=== PAYMENT CONFIG ===")
print(f"Provider: {settings.payment_provider}")
print(f"Mode:     {settings.payment_mode}")
if settings.payment_provider.upper() == "TINKOFF":
    url = (
        settings.tinkoff_test_url
        if settings.payment_mode.upper() == "TEST"
        else settings.tinkoff_prod_url
    )
    print(f"Tinkoff URL: {url}")
elif settings.payment_provider.upper() == "YOOKASSA":
    print(f"YooKassa Return URL: {settings.yookassa_return_url}")
print("======================")
print("DEBUG PRICE:", settings.price_rub)


# === 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def build_app() -> Application:
    app = Application.builder().token(settings.telegram_bot_token).build()

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç "Query is too old"
    async def safe_callback_answer(update, context):
        if update.callback_query:
            try:
                await update.callback_query.answer()
            except Exception:
                pass
        return True

    app.add_handler(MessageHandler(filters.ALL, safe_callback_answer), group=-1)


    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset_consent))
    app.add_handler(CommandHandler("add_balance", add_balance))
    app.add_handler(CommandHandler("reset_balance", reset_balance))
    app.add_handler(CommandHandler("compensate", compensate))
    app.add_handler(CommandHandler("get_balance", get_balance))
    app.add_handler(CommandHandler("balance", handle_balance))
    app.add_handler(CommandHandler("reset_all", reset_all))

    # –ö–æ–ª–±—ç–∫–∏
    app.add_handler(CallbackQueryHandler(handle_consent_yes, pattern=r"^consent_yes$"))
    app.add_handler(CallbackQueryHandler(show_instruction, pattern=r"^instruction$"))
    app.add_handler(CallbackQueryHandler(ensure_user, pattern=r"^ensure_user$"))
    app.add_handler(CallbackQueryHandler(check_balance_and_animate, pattern=r"^animate$"))
    app.add_handler(CallbackQueryHandler(open_balance, pattern=r"^balance$"))
    app.add_handler(CallbackQueryHandler(handle_topup, pattern=r"^topup:\d+$"))
    app.add_handler(CallbackQueryHandler(check_payment, pattern=r"^check_payment:"))
    app.add_handler(CallbackQueryHandler(do_animate, pattern=r"^do_animate$"))
    app.add_handler(CallbackQueryHandler(open_support, pattern=r"^support$"))

    # –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_prompt_text))

    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    async def back_menu(update, context):
        q = update.callback_query
        try:
            await q.answer()
        except Exception:
            pass
        user = await ensure_user(update)
        await show_main_menu(update, context, user or update.effective_user)


    
    app.add_handler(CallbackQueryHandler(back_menu, pattern=r"^back_menu$"))
    from utils.metrics import wrap_all_handlers
    # üîé –≤–µ—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∏–Ω–≥ –Ω–∞ –≤—Å–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    wrap_all_handlers(app)
    return app



# === 5. Speed test ===
async def speed_test():
    t0 = time.time()
    for _ in range(5):
        await asyncio.sleep(0.1)
    print(f"‚ö°Ô∏è Event loop OK ‚Äî {time.time() - t0:.2f} —Å–µ–∫")


# === 6. Startup: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ===
async def on_startup(app: Application):
    # ‚ö°Ô∏è –ù–µ –∂–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(init_db())
    print("‚úÖ DB init task started")

    # === Google Sheets ===
    if gsheets.ENABLED:
        print("‚úÖ Google Sheets –≤–∫–ª—é—á–µ–Ω—ã (GSHEETS_ENABLE=1)")
        asyncio.create_task(gsheets.start_background_flush())
    else:
        print("‚ö†Ô∏è Google Sheets –≤—ã–∫–ª—é—á–µ–Ω—ã (GSHEETS_ENABLE=0)")

    # === Dashboard ===
    if gsheets.ENABLED:
        asyncio.create_task(auto_loop())
        print("‚úÖ Dashboard –≤–∫–ª—é—á–µ–Ω (GSHEETS_ENABLE=1)")
    else:
        print("‚ö†Ô∏è Dashboard –≤—ã–∫–ª—é—á–µ–Ω (GSHEETS_ENABLE=0)")

    # üöÄ –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç debug-loop
    asyncio.get_event_loop().set_debug(False)

    await speed_test()
    print("üöÄ Startup complete")

    # === –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
    print("\n================= SYSTEM STATUS =================")
    print(f"üß© Database...........: {'PostgreSQL (Railway)' if settings.use_postgres else 'SQLite (Local Mode)'}")
    print(f"üìä Google Sheets......: {'ON ‚úÖ (GSHEETS_ENABLE=1)' if gsheets.ENABLED else 'OFF ‚ö†Ô∏è (GSHEETS_ENABLE=0)'}")
    print(f"üìà Dashboard..........: {'ON ‚úÖ' if gsheets.ENABLED else 'OFF ‚ö†Ô∏è'}")
    print(f"üí≥ Payments...........: {settings.payment_provider} ({settings.payment_mode})")
    print(f"üí∞ Price per gen......: {settings.price_rub} ‚ÇΩ")
    print(f"üéÅ Free trial.........: {'1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è' if getattr(settings, 'free_trial_gens', 1) else '‚Äî'}")
    print(f"üéâ Bonus policy.......: +{getattr(settings, 'bonus_per_friend', 1)} –∑–∞ –¥—Ä—É–≥–∞ / +{getattr(settings, 'bonus_per_10', 2)} –∑–∞ 10 –æ–ø–ª–∞—Ç")
    print(f"üì¶ Packs available....: {', '.join([f'{p}‚ÇΩ' for p in settings.packs])}")
    print(f"‚öôÔ∏è  Engine Mode........: {'Production üöÄ' if settings.payment_mode.upper() == 'PROD' else 'Test üß™'}")
    print("=================================================\n")



# === 7. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
async def shutdown_tasks():
    print("üõë Shutting down gracefully...")
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for t in tasks:
        t.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)
    print("‚úÖ All tasks cancelled")


def setup_shutdown_signal():
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    else:
        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        pass

    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, lambda: asyncio.create_task(shutdown_tasks()))

async def auto_set_webhook(app: Application):
    RAILWAY_URL = os.getenv("RAILWAY_STATIC_URL") or "https://photo-live.up.railway.app"
    webhook_url = f"{RAILWAY_URL}/webhook"

    current = await app.bot.get_webhook_info()
    if current.url != webhook_url:
        await app.bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook –æ–±–Ω–æ–≤–ª—ë–Ω: {webhook_url}")
    else:
        print(f"‚úÖ Webhook —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω: {webhook_url}")



# === 8. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
# === 8. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    app = build_app()
    app.post_init = on_startup
    setup_shutdown_signal()

    # üöÄ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—ã–π event loop —Å–∞–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async def prepare_webhook():
        await auto_set_webhook(app)

    # –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω loop —á–µ—Ä–µ–∑ PTB (–æ–Ω –≤—Å—ë –¥–µ–ª–∞–µ—Ç —Å–∞–º)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8080)),
        url_path="webhook",
        webhook_url=f"{os.getenv('RAILWAY_STATIC_URL') or 'https://photo-live.up.railway.app'}/webhook",
        before_startup=prepare_webhook,  # üß† –≤–æ—Ç —Ç—É—Ç —Ñ–æ–∫—É—Å
    )
