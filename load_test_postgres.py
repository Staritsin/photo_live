import asyncio
import asyncpg
import ssl
import time

DB_URL = "postgresql://postgres:PWBWRQTQbPdXBFduRbtoYhBcAaMlJtyQ@shinkansen.proxy.rlwy.net:51443/railway"
CONNECTIONS = 200  # –∏–º–∏—Ç–∞—Ü–∏—è 200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
POOL_SIZE = 20     # —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

async def worker(i, pool):
    async with pool.acquire() as conn:
        await conn.execute("SELECT 1;")
        return i

async def main():
    print(f"üöÄ Starting load test ({CONNECTIONS} users, pool={POOL_SIZE})...")
    start = time.perf_counter()

    ssl_ctx = ssl.create_default_context()
    ssl_ctx.check_hostname = False
    ssl_ctx.verify_mode = ssl.CERT_NONE  # <‚Äì‚Äì –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏

    pool = await asyncpg.create_pool(DB_URL, min_size=5, max_size=POOL_SIZE, ssl=ssl_ctx)

    tasks = [asyncio.create_task(worker(i, pool)) for i in range(CONNECTIONS)]
    await asyncio.gather(*tasks)

    await pool.close()

    total_time = time.perf_counter() - start
    print(f"‚úÖ Done in {total_time:.2f}s for {CONNECTIONS} users")
    print(f"‚ö° Avg per user: {total_time / CONNECTIONS:.3f}s")

if __name__ == "__main__":
    asyncio.run(main())
