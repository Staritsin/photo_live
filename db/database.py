# db/database.py
from typing import AsyncGenerator
import ssl
import asyncio
import logging
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    create_async_engine,
    async_sessionmaker,
)
from sqlalchemy.orm import declarative_base
from sqlalchemy import event, inspect
from contextlib import asynccontextmanager
from config import settings

# === –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π ===
Base = declarative_base()

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã ===
db_url = settings.async_database_url
is_sqlite = "sqlite" in db_url.lower()

# === SSL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–∫–∞ ===
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

connect_args = {
    "ssl": ssl_context,
    "server_settings": {"sslmode": "require"}  # üîπ –¥–æ–±–∞–≤–ª—è–µ–º SSL-—Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
}

# === –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
engine_kwargs = dict(
    echo=False,
    pool_pre_ping=True,
    connect_args=connect_args,
)

# ‚öôÔ∏è –î–ª—è PostgreSQL –≤–∫–ª—é—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
if not is_sqlite:
    engine_kwargs.update(
        pool_size=20,         # üîπ –¥–µ—Ä–∂–∏–º 20 –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        max_overflow=10,      # üîπ –¥–æ 10 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–∏–∫–∞—Ö
        pool_timeout=15,      # üîπ 15 —Å–µ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø—É–ª–∞
        pool_recycle=300,     # üîπ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        pool_pre_ping=True,   # üîπ –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∂–∏–≤—ã—Ö¬ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤
    )

# === –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ ===
engine = create_async_engine(db_url, **engine_kwargs)

# === –û—Ç–ª–∞–¥–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ===
async def debug_pool_status():
    pool = inspect(engine).get_pool()
    print(f"üìä Pool status: size={pool.size()}, checked_out={pool.checkedout()}, overflow={pool.overflow()}")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ===
@event.listens_for(engine.sync_engine, "connect")
def connect_log(dbapi_connection, connection_record):
    print("üîå Connection opened")

@event.listens_for(engine.sync_engine, "close")
def close_log(dbapi_connection, connection_record):
    print("‚ùå Connection closed")

@event.listens_for(engine.sync_engine, "checkout")
def checkout_log(dbapi_connection, connection_record, connection_proxy):
    print("üì§ Connection checked out")

@event.listens_for(engine.sync_engine, "checkin")
def checkin_log(dbapi_connection, connection_record):
    print("üì• Connection returned")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã ===
if is_sqlite:
    print("‚úÖ Using SQLite (Local)")
else:
    print("‚úÖ Using Postgres (Production)")

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π ===
SessionLocal = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π ===
@asynccontextmanager
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    async with SessionLocal() as session:
        yield session

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–æ–º ===
async def init_db(retries: int = 5, delay: int = 3) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    from . import models
    for attempt in range(1, retries + 1):
        try:
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logging.info("‚úÖ Database initialized successfully")
            return
        except Exception as e:
            logging.error(f"‚ùå DB init failed (attempt {attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(delay)
            else:
                raise
