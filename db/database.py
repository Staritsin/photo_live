# db/database.py 
from typing import AsyncGenerator

import ssl
import logging
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    create_async_engine,
    async_sessionmaker,
)
from sqlalchemy.orm import declarative_base
from sqlalchemy import event
from contextlib import asynccontextmanager
from config import settings

# === –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π ===
Base = declarative_base()

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã ===
db_url = settings.async_database_url
is_sqlite = "sqlite" in db_url.lower()

# === SSL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–∫–∞ ===
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

connect_args = {"ssl": ssl_context}  # üëà –ø–µ—Ä–µ–¥–∞—ë–º —Å–≤–æ–π ssl-–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é

engine_kwargs = dict(
    echo=False,
    pool_pre_ping=True,
    connect_args=connect_args,
)


# ‚öôÔ∏è SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pool_size / max_overflow
if not is_sqlite:
    engine_kwargs.update(
        pool_size=50,         # üîπ –¥–µ—Ä–∂–∏–º 20 –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        max_overflow=25,      # üîπ –¥–æ 10 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–∏–∫–∞—Ö
        pool_timeout=20,      # üîπ 10 —Å–µ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–µ—á–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
        pool_recycle=300,     # üîπ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω
        pool_pre_ping=True    # üîπ –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∂–∏–≤—ã—Ö¬ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤
    )

# === –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ ===
engine = create_async_engine(db_url, **engine_kwargs)

from sqlalchemy import inspect

async def debug_pool_status():
    pool = inspect(engine).get_pool()
    print(f"üìä Pool status: size={pool.size()}, checked_out={pool.checkedout()}, overflow={pool.overflow()}")


# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===
@event.listens_for(engine.sync_engine, "connect")
def connect_log(dbapi_connection, connection_record):
    print("üîå Connection opened")

@event.listens_for(engine.sync_engine, "close")
def close_log(dbapi_connection, connection_record):
    print("‚ùå Connection closed")

@event.listens_for(engine.sync_engine, "checkout")
def checkout_log(dbapi_connection, connection_record, connection_proxy):
    print("üì§ Connection checked out")

@event.listens_for(engine.sync_engine, "checkin")
def checkin_log(dbapi_connection, connection_record):
    print("üì• Connection returned")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã ===
if is_sqlite:
    print("‚úÖ Using SQLite (Local)")
else:
    print("‚úÖ Using Postgres (Production)")

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π ===
SessionLocal = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π ===
@asynccontextmanager
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    async with SessionLocal() as session:
        yield session

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async def init_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    from . import models  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logging.info("‚úÖ Database initialized successfully")

