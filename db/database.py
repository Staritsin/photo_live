# db/database.py
from typing import AsyncGenerator
import ssl, asyncio, logging, os
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import declarative_base
from contextlib import asynccontextmanager
from sqlalchemy import inspect
from config import settings


# === 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ===
db_url = os.getenv("DATABASE_URL", "") or settings.async_database_url
is_sqlite = "sqlite" in db_url.lower()
is_render = "onrender.com" in db_url or os.getenv("RENDER")
is_railway = "railway" in db_url

# === 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º URL –∏ SSL ===
if is_render:
    # Render: —É–±–∏—Ä–∞–µ–º sslmode, asyncpg –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –µ–≥–æ
    if "sslmode" in db_url:
        db_url = db_url.split("?")[0]
        print("‚öôÔ∏è Render detected ‚Äî —É–¥–∞–ª—è–µ–º sslmode –∏–∑ DATABASE_URL")

elif is_railway:
    # Railway: –¥–æ–±–∞–≤–ª—è–µ–º sslmode=require –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "sslmode" not in db_url:
        db_url += "?sslmode=require"
        print("‚öôÔ∏è Railway detected ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º sslmode=require")

os.environ["DATABASE_URL"] = db_url


# === 3. SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
connect_args = {}
if not is_sqlite:
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    connect_args = {"ssl": ssl_context}


# === 4. –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ ===
Base = declarative_base()

engine = create_async_engine(
    db_url,
    echo=False,
    pool_pre_ping=True,
    connect_args=connect_args,
    pool_size=20 if not is_sqlite else None,
    max_overflow=10 if not is_sqlite else None,
    pool_timeout=15 if not is_sqlite else None,
    pool_recycle=300 if not is_sqlite else None,
)

SessionLocal = async_sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


# === 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ ===
env = (
    "Render üåê" if is_render else
    "Railway üöÑ" if is_railway else
    "Local üíª"
)
db_type = "SQLite" if is_sqlite else "Postgres"
print(f"‚úÖ Using {db_type} ({env})")
print(f"üîó DATABASE_URL: {db_url}")


# === 6. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–π ===
@asynccontextmanager
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    async with SessionLocal() as session:
        yield session


# === 7. –û—Ç–ª–∞–¥–∫–∞ –ø—É–ª–∞ ===
async def debug_pool_status():
    try:
        pool = inspect(engine).get_pool()
        print(f"üìä Pool: size={pool.size()}, checked_out={pool.checkedout()}, overflow={pool.overflow()}")
    except Exception:
        pass


# === 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
async def init_db(retries: int = 5, delay: int = 3):
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    from . import models
    for attempt in range(1, retries + 1):
        try:
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logging.info("‚úÖ Database initialized successfully")
            return
        except Exception as e:
            logging.error(f"‚ùå DB init failed ({attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(delay)
            else:
                raise
