# utils/metrics.py
import time
import logging
import inspect
import functools
from telegram import Update
from telegram.ext import Application

def _tag_from_update(update: Update) -> str:
    try:
        if update.callback_query:
            data = update.callback_query.data
            return f"callback:{data}"
        if update.message:
            txt = (update.message.text or "").strip()
            if txt.startswith("/"):
                return txt  # –∫–æ–º–∞–Ω–¥–∞
            return "message"
        if update.inline_query:
            return "inline_query"
        if update.edited_message:
            return "edited_message"
        return "update"
    except Exception:
        return "update"

def _timed_callback(cb, *, name: str | None = None):
    name = name or getattr(cb, "__name__", repr(cb))

    if inspect.iscoroutinefunction(cb):
        @functools.wraps(cb)
        async def _async_wrapper(update: Update, context, *args, **kwargs):
            start = time.perf_counter()
            try:
                # üß© –û–±–Ω–æ–≤–ª—è–µ–º last_active_at –ø—Ä–∏ –ª—é–±–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    from sqlalchemy import text
                    from db.database import get_session

                    if update and update.effective_user:
                        async with get_session() as session:
                            await session.execute(text("""
                                UPDATE users
                                SET last_active_at = NOW()
                                WHERE id = :user_id
                            """), {"user_id": update.effective_user.id})
                            await session.commit()
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å last_active_at: {e}")

                # üí¨ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
                return await cb(update, context, *args, **kwargs)

            finally:
                dur = time.perf_counter() - start
                logging.info(f"‚ö°Ô∏è {name} {_tag_from_update(update)} ‚Äî {dur:.2f} —Å–µ–∫")
        return _async_wrapper

    # üß© –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
    @functools.wraps(cb)
    def _sync_wrapper(update: Update, context, *args, **kwargs):
        start = time.perf_counter()
        try:
            return cb(update, context, *args, **kwargs)
        finally:
            dur = time.perf_counter() - start
            logging.info(f"‚ö°Ô∏è {name} {_tag_from_update(update)} ‚Äî {dur:.2f} —Å–µ–∫")
    return _sync_wrapper


def wrap_all_handlers(app: Application) -> None:
    """
    –û–±—Ö–æ–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Application –∏ –ø–æ–¥–º–µ–Ω—è–µ—Ç –∏–º .callback –Ω–∞ –æ–±—ë—Ä–Ω—É—Ç—ã–π —Ç–∞–π–º–µ—Ä–æ–º.
    –ù–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ—Ç: —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–∂–µ.
    """
    for group, handlers in app.handlers.items():
        for h in handlers:
            try:
                orig = h.callback
                h.callback = _timed_callback(orig, name=getattr(orig, "__name__", None))
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Ä–Ω—É—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä {h}: {e}")
